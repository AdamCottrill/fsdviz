!function(){"use strict";let t=o,n=o,e=o,r=u,i=a;function o(t){for(var n=new Array(t),e=-1;++e<t;)n[e]=0;return n}function u(t,n){for(var e=t.length;e<n;)t[e++]=0;return t}function a(t,n){if(n>32)throw new Error("invalid array width!");return t}function s(n){this.length=n,this.subarrays=1,this.width=8,this.masks={0:0},this[0]=t(n)}"undefined"!=typeof Uint8Array&&(t=function(t){return new Uint8Array(t)},n=function(t){return new Uint16Array(t)},e=function(t){return new Uint32Array(t)},r=function(t,n){if(t.length>=n)return t;var e=new t.constructor(n);return e.set(t),e},i=function(t,r){var i;switch(r){case 16:i=n(t.length);break;case 32:i=e(t.length);break;default:throw new Error("invalid array width!")}return i.set(t),i}),s.prototype.lengthen=function(t){var n,e;for(n=0,e=this.subarrays;n<e;++n)this[n]=r(this[n],t);this.length=t},s.prototype.add=function(){var n,e,r,o,u;for(o=0,u=this.subarrays;o<u;++o)if(r=(~(n=this.masks[o])&n+1)>>>0,!((e=this.width-32*o)>=32)||r)return e<32&&r&1<<e&&(this[o]=i(this[o],e<<=1),this.width=32*o+e),this.masks[o]|=r,{offset:o,one:r};return this[this.subarrays]=t(this.length),this.masks[this.subarrays]=1,this.width+=8,{offset:this.subarrays++,one:1}},s.prototype.copy=function(t,n){var e,r;for(e=0,r=this.subarrays;e<r;++e)this[e][t]=this[e][n]},s.prototype.truncate=function(t){var n,e;for(n=0,e=this.subarrays;n<e;++n)for(var r=this.length-1;r>=t;r--)this[n][r]=0;this.length=t},s.prototype.zero=function(t){var n,e;for(n=0,e=this.subarrays;n<e;++n)if(this[n][t])return!1;return!0},s.prototype.zeroExcept=function(t,n,e){var r,i;for(r=0,i=this.subarrays;r<i;++r)if(r===n?this[r][t]&e:this[r][t])return!1;return!0},s.prototype.zeroExceptMask=function(t,n){var e,r;for(e=0,r=this.subarrays;e<r;++e)if(this[e][t]&n[e])return!1;return!0},s.prototype.only=function(t,n,e){var r,i;for(r=0,i=this.subarrays;r<i;++r)if(this[r][t]!=(r===n?e:0))return!1;return!0},s.prototype.onlyExcept=function(t,n,e,r,i){var o,u,a;for(u=0,a=this.subarrays;u<a;++u)if(o=this[u][t],u===n&&(o=(o&e)>>>0),o!=(u===r?i:0))return!1;return!0};var l={array8:o,array16:o,array32:o,arrayLengthen:u,arrayWiden:a,bitarray:s};var f=(t,n)=>function(e){var r=e.length;return[t.left(e,n,0,r),t.right(e,n,0,r)]},c=(t,n)=>{var e=n[0],r=n[1];return function(n){var i=n.length;return[t.left(n,e,0,i),t.left(n,r,0,i)]}},h=t=>[0,t.length],p=t=>t,v=()=>null,d=()=>0;function g(t){function n(t,n,r){for(var i=r-n,o=1+(i>>>1);--o>0;)e(t,o,i,n);return t}function e(n,e,r,i){for(var o,u=n[--i+e],a=t(u);(o=e<<1)<=r&&(o<r&&t(n[i+o])>t(n[i+o+1])&&o++,!(a<=t(n[i+o])));)n[i+e]=n[i+o],e=o;n[i+e]=u}return n.sort=function(t,n,r){for(var i,o=r-n;--o>0;)i=t[n],t[n]=t[n+o],t[n+o]=i,e(t,1,o,n);return t},n}const y=g(p);function m(t){var n=y.by(t);return function(e,r,i,o){var u,a,s,l=new Array(o=Math.min(i-r,o));for(a=0;a<o;++a)l[a]=e[r++];if(n(l,0,o),r<i){u=t(l[0]);do{t(s=e[r])>u&&(l[0]=s,u=t(n(l,0,o)[0]))}while(++r<i)}return l}}y.by=g;const _=m(p);function w(t){function n(n,e,r,i){for(;r<i;){var o=r+i>>>1;e<t(n[o])?i=o:r=o+1}return r}return n.right=n,n.left=function(n,e,r,i){for(;r<i;){var o=r+i>>>1;t(n[o])<e?r=o+1:i=o}return r},n}_.by=m;const b=w(p);b.by=w;var x=(t,n,e)=>{for(var r=0,i=n.length,o=e?JSON.parse(JSON.stringify(t)):new Array(i);r<i;++r)o[r]=t[n[r]];return o};var A=t=>t+1,k=t=>t-1,E=t=>function(n,e){return n+ +t(e)},M=t=>function(n,e){return n-t(e)};const N=(t,n)=>{const e=t[n];return"function"==typeof e?e.call(t):e},S=/\[([\w\d]+)\]/g;var z,O,C=(t,n)=>function(t,n,e,r,i){for(i in r=(e=e.split(".")).splice(-1,1),e)n=n[e[i]]=n[e[i]]||{};return t(n,r)}(N,t,n.replace(S,".$1")),P=-1;function D(){var t,n={add:s,remove:g,dimension:N,groupAll:S,size:z,all:O,allFiltered:D,onChange:R,isElementFiltered:w},e=[],r=0,i=[],o=[],u=[],a=[];function s(i){var u=r,a=i.length;return a&&(e=e.concat(i),t.lengthen(r+=a),o.forEach((function(t){t(i,u,a)})),T("dataAdded")),n}function g(n){for(var o,a=new Array(r),s=[],l="function"==typeof n,f=0,c=0;f<r;++f)o=f,(l?n(e[o],o):t.zero(o))?(s.push(f),a[f]=P):a[f]=c++;i.forEach((function(t){t(-1,-1,[],s,!0)})),u.forEach((function(t){t(a)}));for(var h=0,p=0;h<r;++h)a[h]!==P&&(h!==p&&(t.copy(p,h),e[p]=e[h]),++p);e.length=r=p,t.truncate(p),T("dataRemoved")}function m(n){var e,r,i,o,u=Array(t.subarrays);for(e=0;e<t.subarrays;e++)u[e]=-1;for(r=0,i=n.length;r<i;r++)u[(o=n[r].id())>>7]&=~(1<<(63&o));return u}function w(n,e){var r=m(e||[]);return t.zeroExceptMask(n,r)}function N(n,a){if("string"==typeof n){var s=n;n=function(t){return C(t,s)}}var g,m,w,N,S,z,O,D,R,X,$,L,F,U,H={filter:function(t){return null==t?ut():Array.isArray(t)?ot(t):"function"==typeof t?at(t):it(t)},filterExact:it,filterRange:ot,filterFunction:at,filterAll:ut,currentFilter:function(){return L},hasCurrentFilter:function(){return F},top:function(n,r){var i,o=[],u=Z,s=0;r&&r>0&&(s=r);for(;--u>=G&&n>0;)t.zero(i=z[u])&&(s>0?--s:(o.push(e[i]),--n));if(a)for(u=0;u<Y.length&&n>0;u++)t.zero(i=Y[u])&&(s>0?--s:(o.push(e[i]),--n));return o},bottom:function(n,r){var i,o,u=[],s=0;r&&r>0&&(s=r);if(a)for(i=0;i<Y.length&&n>0;i++)t.zero(o=Y[i])&&(s>0?--s:(u.push(e[o]),--n));i=G;for(;i<Z&&n>0;)t.zero(o=z[i])&&(s>0?--s:(u.push(e[o]),--n)),i++;return u},group:lt,groupAll:function(){var t=lt(v),n=t.all;return delete t.all,delete t.top,delete t.order,delete t.orderNatural,delete t.size,t.value=function(){return n()[0].value},t},dispose:ft,remove:ft,accessor:n,id:function(){return N}},Y=[],B=function(t){return j(t).sort((function(t,n){var e=O[t],r=O[n];return e<r?-1:e>r?1:t-n}))},V=h,J=[],W=[],G=0,Z=0,K=0;o.unshift(tt),o.push(nt),u.push(et);var Q=t.add();function tt(e,i,o){var u,s;if(a){K=0,I=0,U=[];for(var f=0;f<e.length;f++)for(I=0,U=n(e[f]);I<U.length;I++)K++;O=[],u=j(e.length),s=q(K,1);for(var c=j(K),h=0,p=0;p<e.length;p++)if((U=n(e[p])).length)for(u[p]=U.length,I=0;I<U.length;I++)O.push(U[I]),c[h]=p,h++;else u[p]=0,Y.push(p+i);var v=B(K);O=x(O,v),D=x(c,v)}else O=e.map(n),D=B(o),O=x(O,D);var d,y,m,_=V(O),b=_[0],A=_[1];if(a)if(o=K,$)for(d=0;d<o;++d)$(O[d],d)||(0==--u[D[d]]&&(t[w][D[d]+i]|=g),s[d]=1);else{for(y=0;y<b;++y)0==--u[D[y]]&&(t[w][D[y]+i]|=g),s[y]=1;for(m=A;m<o;++m)0==--u[D[m]]&&(t[w][D[m]+i]|=g),s[m]=1}else if($)for(d=0;d<o;++d)$(O[d],d)||(t[w][D[d]+i]|=g);else{for(y=0;y<b;++y)t[w][D[y]+i]|=g;for(m=A;m<o;++m)t[w][D[m]+i]|=g}if(!i)return S=O,z=D,R=u,X=s,G=b,void(Z=A);var k,E=S,M=z,N=X,C=0;if(f=0,a&&(k=i,i=E.length,o=K),S=new Array(a?i+o:r),z=a?new Array(i+o):q(r,r),a&&(X=q(i+o,1)),a){var P=R.length;R=l.arrayLengthen(R,r);for(var I=0;I+P<r;I++)R[I+P]=u[I]}for(var T=0;f<i&&C<o;++T)E[f]<O[C]?(S[T]=E[f],a&&(X[T]=N[f]),z[T]=M[f++]):(S[T]=O[C],a&&(X[T]=s[C]),z[T]=D[C++]+(a?k:i));for(;f<i;++f,++T)S[T]=E[f],a&&(X[T]=N[f]),z[T]=M[f];for(;C<o;++C,++T)S[T]=O[C],a&&(X[T]=s[C]),z[T]=D[C]+(a?k:i);_=V(S),G=_[0],Z=_[1]}function nt(t,n,e){J.forEach((function(t){t(O,D,n,e)})),O=D=null}function et(t){if(a){for(var n=0,e=0;n<Y.length;n++)t[Y[n]]!==P&&(Y[e]=t[Y[n]],e++);for(Y.length=e,n=0,e=0;n<r;n++)t[n]!==P&&(e!==n&&(R[e]=R[n]),e++);R=R.slice(0,e)}for(var i,o=S.length,u=0,s=0;u<o;++u)t[i=z[u]]!==P&&(u!==s&&(S[s]=S[u]),z[s]=t[i],a&&(X[s]=X[u]),++s);for(S.length=s,a&&(X=X.slice(0,s));s<o;)z[s++]=0;var l=V(S);G=l[0],Z=l[1]}function rt(n){var e=n[0],r=n[1];if($)return $=null,st((function(t,n){return e<=n&&n<r}),0===n[0]&&n[1]===S.length),G=e,Z=r,H;var o,u,s,l=[],f=[],c=[],p=[];if(e<G)for(o=e,u=Math.min(G,r);o<u;++o)l.push(z[o]),c.push(o);else if(e>G)for(o=G,u=Math.min(e,Z);o<u;++o)f.push(z[o]),p.push(o);if(r>Z)for(o=Math.max(e,Z),u=r;o<u;++o)l.push(z[o]),c.push(o);else if(r<Z)for(o=Math.max(G,r),u=Z;o<u;++o)f.push(z[o]),p.push(o);if(a){var v=[],d=[];for(o=0;o<l.length;o++)R[l[o]]++,X[c[o]]=0,1===R[l[o]]&&(t[w][l[o]]^=g,v.push(l[o]));for(o=0;o<f.length;o++)R[f[o]]--,X[p[o]]=1,0===R[f[o]]&&(t[w][f[o]]^=g,d.push(f[o]));if(l=v,f=d,V===h)for(o=0;o<Y.length;o++)t[w][s=Y[o]]&g&&(t[w][s]^=g,l.push(s));else for(o=0;o<Y.length;o++)t[w][s=Y[o]]&g||(t[w][s]^=g,f.push(s))}else{for(o=0;o<l.length;o++)t[w][l[o]]^=g;for(o=0;o<f.length;o++)t[w][f[o]]^=g}return G=e,Z=r,i.forEach((function(t){t(g,w,l,f)})),T("filtered"),H}function it(t){return L=t,F=!0,rt((V=f(b,t))(S))}function ot(t){return L=t,F=!0,rt((V=c(b,t))(S))}function ut(){return L=void 0,F=!1,rt((V=h)(S))}function at(t){L=t,F=!0,$=t,V=h,st(t,!1);var n=V(S);return G=n[0],Z=n[1],H}function st(n,e){var r,o,u,s=[],l=[],f=[],c=[],h=S.length;if(!a)for(r=0;r<h;++r)!(t[w][o=z[r]]&g)^!!(u=n(S[r],r))&&(u?s.push(o):l.push(o));if(a)for(r=0;r<h;++r)n(S[r],r)?(s.push(z[r]),f.push(r)):(l.push(z[r]),c.push(r));if(a){var p=[],v=[];for(r=0;r<s.length;r++)1===X[f[r]]&&(R[s[r]]++,X[f[r]]=0,1===R[s[r]]&&(t[w][s[r]]^=g,p.push(s[r])));for(r=0;r<l.length;r++)0===X[c[r]]&&(R[l[r]]--,X[c[r]]=1,0===R[l[r]]&&(t[w][l[r]]^=g,v.push(l[r])));if(s=p,l=v,e)for(r=0;r<Y.length;r++)t[w][o=Y[r]]&g&&(t[w][o]^=g,s.push(o));else for(r=0;r<Y.length;r++)t[w][o=Y[r]]&g||(t[w][o]^=g,l.push(o))}else{for(r=0;r<s.length;r++)t[w][s[r]]&g&&(t[w][s[r]]&=m);for(r=0;r<l.length;r++)t[w][l[r]]&g||(t[w][l[r]]|=g)}i.forEach((function(t){t(g,w,s,l)})),T("filtered")}function lt(n){var o={top:G,all:V,reduce:Z,reduceCount:K,reduceSum:Q,order:tt,orderNatural:nt,size:et,dispose:rt,remove:rt};W.push(o);var s,f,c,h,b,x,N,O,C=8,D=I(C),j=0,R=v,T=v,X=!0,$=n===v;function L(o,u,c,h){a&&(O=c,c=S.length-o.length,h=o.length);var p,d,g,y,_,A,k=s,E=a?[]:q(j,D),M=b,z=x,P=N,L=j,F=0,V=0;for(X&&(M=P=v),X&&(z=P=v),s=new Array(j),j=0,f=a?L?f:[]:L>1?l.arrayLengthen(f,r):q(r,D),L&&(g=(d=k[0]).key);V<h&&!((y=n(o[V]))>=y);)++V;for(;V<h;){for(d&&g<=y?(_=d,A=g,E[F]=j,(d=k[++F])&&(g=d.key)):(_={key:y,value:P()},A=y),s[j]=_;y<=A&&(p=u[V]+(a?O:c),a?f[p]?f[p].push(j):f[p]=[j]:f[p]=j,_.value=M(_.value,e[p],!0),t.zeroExcept(p,w,m)||(_.value=z(_.value,e[p],!1)),!(++V>=h));)y=n(o[V]);W()}for(;F<L;)s[E[F]=j]=k[F++],W();if(a)for(var J=0;J<r;J++)f[J]||(f[J]=[]);if(j>F)if(a)for(F=0;F<O;++F)for(J=0;J<f[F].length;J++)f[F][J]=E[f[F][J]];else for(F=0;F<c;++F)f[F]=E[f[F]];function W(){a?j++:++j===D&&(E=l.arrayWiden(E,C<<=1),f=l.arrayWiden(f,C),D=I(C))}p=i.indexOf(R),j>1||a?(R=U,T=Y):(!j&&$&&(j=1,s=[{key:null,value:P()}]),1===j?(R=H,T=B):(R=v,T=v),f=null),i[p]=R}function F(t){if(j>1||a){var n,e,o,u=j,l=s,c=q(u,u);if(a){for(n=0,o=0;n<r;++n)if(t[n]!==P){for(f[o]=f[n],e=0;e<f[o].length;e++)c[f[o][e]]=1;++o}f=f.slice(0,o)}else for(n=0,o=0;n<r;++n)t[n]!==P&&(c[f[o]=f[n]]=1,++o);for(s=[],j=0,n=0;n<u;++n)c[n]&&(c[n]=j++,s.push(l[n]));if(j>1||a)if(a)for(n=0;n<o;++n)for(e=0;e<f[n].length;++e)f[n][e]=c[f[n][e]];else for(n=0;n<o;++n)f[n]=c[f[n]];else f=null;i[i.indexOf(R)]=j>1||a?(T=Y,R=U):1===j?(T=B,R=H):T=R=v}else if(1===j){if($)return;for(var h=0;h<r;++h)if(t[h]!==P)return;s=[],j=0,i[i.indexOf(R)]=R=T=v}}function U(n,r,i,o,u){var l,c,h,p,v;if(!(n===g&&r===w||X))if(a){for(l=0,p=i.length;l<p;++l)if(t.zeroExcept(h=i[l],w,m))for(c=0;c<f[h].length;c++)(v=s[f[h][c]]).value=b(v.value,e[h],!1,c);for(l=0,p=o.length;l<p;++l)if(t.onlyExcept(h=o[l],w,m,r,n))for(c=0;c<f[h].length;c++)(v=s[f[h][c]]).value=x(v.value,e[h],u,c)}else{for(l=0,p=i.length;l<p;++l)t.zeroExcept(h=i[l],w,m)&&((v=s[f[h]]).value=b(v.value,e[h],!1));for(l=0,p=o.length;l<p;++l)t.onlyExcept(h=o[l],w,m,r,n)&&((v=s[f[h]]).value=x(v.value,e[h],u))}}function H(n,r,i,o,u){if(!(n===g&&r===w||X)){var a,l,f,c=s[0];for(a=0,f=i.length;a<f;++a)t.zeroExcept(l=i[a],w,m)&&(c.value=b(c.value,e[l],!1));for(a=0,f=o.length;a<f;++a)t.onlyExcept(l=o[a],w,m,r,n)&&(c.value=x(c.value,e[l],u))}}function Y(){var n,i,o;for(n=0;n<j;++n)s[n].value=N();if(a){for(n=0;n<r;++n)for(i=0;i<f[n].length;i++)(o=s[f[n][i]]).value=b(o.value,e[n],!0,i);for(n=0;n<r;++n)if(!t.zeroExcept(n,w,m))for(i=0;i<f[n].length;i++)(o=s[f[n][i]]).value=x(o.value,e[n],!1,i)}else{for(n=0;n<r;++n)(o=s[f[n]]).value=b(o.value,e[n],!0);for(n=0;n<r;++n)t.zeroExcept(n,w,m)||((o=s[f[n]]).value=x(o.value,e[n],!1))}}function B(){var n,i=s[0];for(i.value=N(),n=0;n<r;++n)i.value=b(i.value,e[n],!0);for(n=0;n<r;++n)t.zeroExcept(n,w,m)||(i.value=x(i.value,e[n],!1))}function V(){return X&&(T(),X=!1),s}function G(t){var n=c(V(),0,s.length,t);return h.sort(n,0,n.length)}function Z(t,n,e){return b=t,x=n,N=e,X=!0,o}function K(){return Z(A,k,d)}function Q(t){return Z(E(t),M(t),d)}function tt(t){function n(n){return t(n.value)}return c=_.by(n),h=y.by(n),o}function nt(){return tt(p)}function et(){return j}function rt(){var t=i.indexOf(R);return t>=0&&i.splice(t,1),(t=J.indexOf(L))>=0&&J.splice(t,1),(t=u.indexOf(F))>=0&&u.splice(t,1),(t=W.indexOf(o))>=0&&W.splice(t,1),o}return arguments.length<1&&(n=p),i.push(R),J.push(L),u.push(F),L(S,z,0,r),K().orderNatural()}function ft(){W.forEach((function(t){t.dispose()}));var n=o.indexOf(tt);return n>=0&&o.splice(n,1),(n=o.indexOf(nt))>=0&&o.splice(n,1),(n=u.indexOf(et))>=0&&u.splice(n,1),t.masks[w]&=m,ut()}return w=Q.offset,g=Q.one,m=~g,N=w<<7|Math.log(g)/Math.log(2),tt(e,0,r),nt(e,0,r),H}function S(){var n,u,a,s,l={reduce:p,reduceCount:v,reduceSum:function(t){return p(E(t),M(t),d)},value:function(){f&&(function(){var i;for(n=s(),i=0;i<r;++i)n=u(n,e[i],!0),t.zero(i)||(n=a(n,e[i],!1))}(),f=!1);return n},dispose:g,remove:g},f=!0;function c(i,o){var s;if(!f)for(s=o;s<r;++s)n=u(n,e[s],!0),t.zero(s)||(n=a(n,e[s],!1))}function h(r,i,o,s,l){var c,h,p;if(!f){for(c=0,p=o.length;c<p;++c)t.zero(h=o[c])&&(n=u(n,e[h],l));for(c=0,p=s.length;c<p;++c)t.only(h=s[c],i,r)&&(n=a(n,e[h],l))}}function p(t,n,e){return u=t,a=n,s=e,f=!0,l}function v(){return p(A,k,d)}function g(){var t=i.indexOf(h);return t>=0&&i.splice(t,1),(t=o.indexOf(c))>=0&&o.splice(t,1),l}return i.push(h),o.push(c),c(e,0),v()}function z(){return r}function O(){return e}function D(n){var i=[],o=0,u=m(n||[]);for(o=0;o<r;o++)t.zeroExceptMask(o,u)&&i.push(e[o]);return i}function R(t){if("function"==typeof t)return a.push(t),function(){a.splice(a.indexOf(t),1)};console.warn("onChange callback parameter must be a function!")}function T(t){for(var n=0;n<a.length;n++)a[n](t)}return t=new l.bitarray(0),arguments.length?s(arguments[0]):n}function q(t,n){return(n<257?l.array8:n<65537?l.array16:l.array32)(t)}function j(t){for(var n=q(t,t),e=-1;++e<t;)n[e]=e;return n}function I(t){return 8===t?256:16===t?65536:4294967296}function R(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}D.heap=y,D.heapselect=_,D.bisect=b,D.permute=x,1===(z=R).length&&(O=z,z=function(t,n){return R(O(t),n)});var T={value:function(){}};function X(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new L(r)}function L(t){this._=t}function F(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function U(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function H(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=T,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function Y(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function B(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function V(){}L.prototype=X.prototype={constructor:L,on:function(t,n){var e,r=this._,i=F(t+"",r),o=-1,u=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=H(r[e],t.name,n);else if(null==n)for(e in r)r[e]=H(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=U(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new L(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var J=.7,W=1/J,G="\\s*([+-]?\\d+)\\s*",Z="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",K="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Q=/^#([0-9a-f]{3,8})$/,tt=new RegExp("^rgb\\("+[G,G,G]+"\\)$"),nt=new RegExp("^rgb\\("+[K,K,K]+"\\)$"),et=new RegExp("^rgba\\("+[G,G,G,Z]+"\\)$"),rt=new RegExp("^rgba\\("+[K,K,K,Z]+"\\)$"),it=new RegExp("^hsl\\("+[Z,K,K]+"\\)$"),ot=new RegExp("^hsla\\("+[Z,K,K,Z]+"\\)$"),ut={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function at(){return this.rgb().formatHex()}function st(){return this.rgb().formatRgb()}function lt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Q.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?ft(n):3===e?new vt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?ct(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?ct(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=tt.exec(t))?new vt(n[1],n[2],n[3],1):(n=nt.exec(t))?new vt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=et.exec(t))?ct(n[1],n[2],n[3],n[4]):(n=rt.exec(t))?ct(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=it.exec(t))?mt(n[1],n[2]/100,n[3]/100,1):(n=ot.exec(t))?mt(n[1],n[2]/100,n[3]/100,n[4]):ut.hasOwnProperty(t)?ft(ut[t]):"transparent"===t?new vt(NaN,NaN,NaN,0):null}function ft(t){return new vt(t>>16&255,t>>8&255,255&t,1)}function ct(t,n,e,r){return r<=0&&(t=n=e=NaN),new vt(t,n,e,r)}function ht(t){return t instanceof V||(t=lt(t)),t?new vt((t=t.rgb()).r,t.g,t.b,t.opacity):new vt}function pt(t,n,e,r){return 1===arguments.length?ht(t):new vt(t,n,e,null==r?1:r)}function vt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function dt(){return"#"+yt(this.r)+yt(this.g)+yt(this.b)}function gt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function yt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function mt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new wt(t,n,e,r)}function _t(t){if(t instanceof wt)return new wt(t.h,t.s,t.l,t.opacity);if(t instanceof V||(t=lt(t)),!t)return new wt;if(t instanceof wt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new wt(u,a,s,t.opacity)}function wt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function bt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Y(V,lt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:at,formatHex:at,formatHsl:function(){return _t(this).formatHsl()},formatRgb:st,toString:st}),Y(vt,pt,B(V,{brighter:function(t){return t=null==t?W:Math.pow(W,t),new vt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?J:Math.pow(J,t),new vt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:dt,formatHex:dt,formatRgb:gt,toString:gt})),Y(wt,(function(t,n,e,r){return 1===arguments.length?_t(t):new wt(t,n,e,null==r?1:r)}),B(V,{brighter:function(t){return t=null==t?W:Math.pow(W,t),new wt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?J:Math.pow(J,t),new wt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new vt(bt(t>=240?t-240:t+120,i,r),bt(t,i,r),bt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var xt,At,kt=0,Et=0,Mt=0,Nt=0,St=0,zt=0,Ot="object"==typeof performance&&performance.now?performance:Date,Ct="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return St||(Ct(Dt),St=Ot.now()+zt)}function Dt(){St=0}function qt(){this._call=this._time=this._next=null}function jt(t,n,e){var r=new qt;return r.restart(t,n,e),r}function It(){St=(Nt=Ot.now())+zt,kt=Et=0;try{!function(){Pt(),++kt;for(var t,n=xt;n;)(t=St-n._time)>=0&&n._call.call(null,t),n=n._next;--kt}()}finally{kt=0,function(){var t,n,e=xt,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:xt=n);At=t,Tt(r)}(),St=0}}function Rt(){var t=Ot.now(),n=t-Nt;n>1e3&&(zt-=n,Nt=t)}function Tt(t){kt||(Et&&(Et=clearTimeout(Et)),t-St>24?(t<1/0&&(Et=setTimeout(It,t-Ot.now()-zt)),Mt&&(Mt=clearInterval(Mt))):(Mt||(Nt=Ot.now(),Mt=setInterval(Rt,1e3)),kt=1,Ct(It)))}function Xt(t,n,e){var r=new qt;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r}qt.prototype=jt.prototype={constructor:qt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pt():+e)+(null==n?0:+n),this._next||At===this||(At?At._next=this:xt=this,At=this),this._call=t,this._time=e,Tt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Tt())}},X("start","end","cancel","interrupt");var $t="$";function Lt(){}function Ft(t,n){var e=new Lt;if(t instanceof Lt)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}function Ut(){}Lt.prototype=Ft.prototype={constructor:Lt,has:function(t){return $t+t in this},get:function(t){return this[$t+t]},set:function(t,n){return this[$t+t]=n,this},remove:function(t){var n=$t+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===$t&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===$t&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===$t&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===$t&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===$t&&++t;return t},empty:function(){for(var t in this)if(t[0]===$t)return!1;return!0},each:function(t){for(var n in this)n[0]===$t&&t(this[n],n.slice(1),this)}};var Ht=Ft.prototype;function Yt(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}Ut.prototype={constructor:Ut,has:Ht.has,add:function(t){return this[$t+(t+="")]=t,this},remove:Ht.remove,clear:Ht.clear,values:Ht.keys,size:Ht.size,empty:Ht.empty,each:Ht.each};var Bt,Vt=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Jt(t){if(!(n=Vt.exec(t)))throw new Error("invalid format: "+t);var n;return new Wt({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Wt(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Gt(t,n){var e=Yt(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Jt.prototype=Wt.prototype,Wt.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Zt={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Gt(100*t,n)},r:Gt,s:function(t,n){var e=Yt(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Bt=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Yt(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function Kt(t){return t}var Qt,tn,nn=Array.prototype.map,en=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function rn(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Kt:(n=nn.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],u=0,a=n[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(t.substring(i-=a,i+a)),!((s+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",u=void 0===t.decimal?".":t.decimal+"",a=void 0===t.numerals?Kt:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(nn.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function c(t){var n=(t=Jt(t)).fill,e=t.align,c=t.sign,h=t.symbol,p=t.zero,v=t.width,d=t.comma,g=t.precision,y=t.trim,m=t.type;"n"===m?(d=!0,m="g"):Zt[m]||(void 0===g&&(g=12),y=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var _="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===h?o:/[%p]/.test(m)?s:"",b=Zt[m],x=/[defgprs%]/.test(m);function A(t){var i,o,s,h=_,A=w;if("c"===m)A=b(t)+A,t="";else{var k=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:b(Math.abs(t),g),y&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),k&&0==+t&&"+"!==c&&(k=!1),h=(k?"("===c?c:l:"-"===c||"("===c?"":c)+h,A=("s"===m?en[8+Bt/3]:"")+A+(k&&"("===c?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(s=t.charCodeAt(i))||s>57){A=(46===s?u+t.slice(i+1):t.slice(i))+A,t=t.slice(0,i);break}}d&&!p&&(t=r(t,1/0));var E=h.length+t.length+A.length,M=E<v?new Array(v-E+1).join(n):"";switch(d&&p&&(t=r(M+t,M.length?v-A.length:1/0),M=""),e){case"<":t=h+t+A+M;break;case"=":t=h+M+t+A;break;case"^":t=M.slice(0,E=M.length>>1)+h+t+A+M.slice(E);break;default:t=M+h+t+A}return a(t)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),A.toString=function(){return t+""},A}return{format:c,formatPrefix:function(t,n){var e,r=c(((t=Jt(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor((e=n,((e=Yt(Math.abs(e)))?e[1]:NaN)/3)))),o=Math.pow(10,-i),u=en[8+i/3];return function(t){return r(o*t)+u}}}}function on(t){return function(){return t}}function un(t){return 1==(t=+t)?an:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):on(isNaN(n)?e:n)}}function an(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):on(isNaN(t)?n:t)}Qt=rn({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),tn=Qt.format,Qt.formatPrefix;var sn=function t(n){var e=un(n);function r(t,n){var r=e((t=pt(t)).r,(n=pt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=an(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function ln(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,cn=new RegExp(fn.source,"g");function hn(t,n){var e,r,i,o=fn.lastIndex=cn.lastIndex=0,u=-1,a=[],s=[];for(t+="",n+="";(e=fn.exec(t))&&(r=cn.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:ln(e,r)})),o=cn.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)a[(e=s[r]).i]=e.x(t);return a.join("")})}var pn,vn,dn,gn,yn=180/Math.PI,mn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function _n(t,n,e,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,s/=a),t*r<n*e&&(t=-t,n=-n,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*yn,skewX:Math.atan(s)*yn,scaleX:u,scaleY:a}}function wn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],s=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,n,null,e);a.push({i:s-4,x:ln(t,i)},{i:s-2,x:ln(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:ln(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:ln(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,s),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:ln(t,e)},{i:a-2,x:ln(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,s),o=u=null,function(t){for(var n,e=-1,r=s.length;++e<r;)a[(n=s[e]).i]=n.x(t);return a.join("")}}}var bn=wn((function(t){return"none"===t?mn:(pn||(pn=document.createElement("DIV"),vn=document.documentElement,dn=document.defaultView),pn.style.transform=t,t=dn.getComputedStyle(vn.appendChild(pn),null).getPropertyValue("transform"),vn.removeChild(pn),_n(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),xn=wn((function(t){return null==t?mn:(gn||(gn=document.createElementNS("http://www.w3.org/2000/svg","g")),gn.setAttribute("transform",t),(t=gn.transform.baseVal.consolidate())?_n((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):mn)}),", ",")",")"),An="http://www.w3.org/1999/xhtml",kn={svg:"http://www.w3.org/2000/svg",xhtml:An,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function En(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),kn.hasOwnProperty(n)?{space:kn[n],local:t}:t}function Mn(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===An&&n.documentElement.namespaceURI===An?n.createElement(t):n.createElementNS(e,t)}}function Nn(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Sn(t){var n=En(t);return(n.local?Nn:Mn)(n)}function zn(){}function On(t){return null==t?zn:function(){return this.querySelector(t)}}function Cn(){return[]}function Pn(t){return null==t?Cn:function(){return this.querySelectorAll(t)}}function Dn(t){return function(){return this.matches(t)}}function qn(t){return new Array(t.length)}function jn(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}jn.prototype={constructor:jn,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function In(t,n,e,r,i,o){for(var u,a=0,s=n.length,l=o.length;a<l;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new jn(t,o[a]);for(;a<s;++a)(u=n[a])&&(i[a]=u)}function Rn(t,n,e,r,i,o,u){var a,s,l,f={},c=n.length,h=o.length,p=new Array(c);for(a=0;a<c;++a)(s=n[a])&&(p[a]=l="$"+u.call(s,s.__data__,a,n),l in f?i[a]=s:f[l]=s);for(a=0;a<h;++a)(s=f[l="$"+u.call(t,o[a],a,o)])?(r[a]=s,s.__data__=o[a],f[l]=null):e[a]=new jn(t,o[a]);for(a=0;a<c;++a)(s=n[a])&&f[p[a]]===s&&(i[a]=s)}function Tn(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Xn(t){return function(){this.removeAttribute(t)}}function $n(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ln(t,n){return function(){this.setAttribute(t,n)}}function Fn(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Un(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Hn(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Yn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Bn(t){return function(){this.style.removeProperty(t)}}function Vn(t,n,e){return function(){this.style.setProperty(t,n,e)}}function Jn(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Wn(t,n){return t.style.getPropertyValue(n)||Yn(t).getComputedStyle(t,null).getPropertyValue(n)}function Gn(t){return function(){delete this[t]}}function Zn(t,n){return function(){this[t]=n}}function Kn(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Qn(t){return t.trim().split(/^|\s+/)}function te(t){return t.classList||new ne(t)}function ne(t){this._node=t,this._names=Qn(t.getAttribute("class")||"")}function ee(t,n){for(var e=te(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function re(t,n){for(var e=te(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ie(t){return function(){ee(this,t)}}function oe(t){return function(){re(this,t)}}function ue(t,n){return function(){(n.apply(this,arguments)?ee:re)(this,t)}}function ae(){this.textContent=""}function se(t){return function(){this.textContent=t}}function le(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function fe(){this.innerHTML=""}function ce(t){return function(){this.innerHTML=t}}function he(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function pe(){this.nextSibling&&this.parentNode.appendChild(this)}function ve(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function de(){return null}function ge(){var t=this.parentNode;t&&t.removeChild(this)}function ye(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function me(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}ne.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var _e={};"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(_e={mouseenter:"mouseover",mouseleave:"mouseout"}));function we(t,n,e){return t=be(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function be(t,n,e){return function(r){try{t.call(this,this.__data__,n,e)}finally{}}}function xe(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ae(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ke(t,n,e){var r=_e.hasOwnProperty(t.type)?we:be;return function(i,o,u){var a,s=this.__on,l=r(n,o,u);if(s)for(var f=0,c=s.length;f<c;++f)if((a=s[f]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=e),void(a.value=n);this.addEventListener(t.type,l,e),a={type:t.type,name:t.name,value:n,listener:l,capture:e},s?s.push(a):this.__on=[a]}}function Ee(t,n,e){var r=Yn(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Me(t,n){return function(){return Ee(this,t,n)}}function Ne(t,n){return function(){return Ee(this,t,n.apply(this,arguments))}}var Se=[null];function ze(t,n){this._groups=t,this._parents=n}function Oe(){return new ze([[document.documentElement]],Se)}function Ce(t){return"string"==typeof t?new ze([[document.querySelector(t)]],[document.documentElement]):new ze([[t]],Se)}ze.prototype=Oe.prototype={constructor:ze,select:function(t){"function"!=typeof t&&(t=On(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],s=a.length,l=r[i]=new Array(s),f=0;f<s;++f)(o=a[f])&&(u=t.call(o,o.__data__,f,a))&&("__data__"in o&&(u.__data__=o.__data__),l[f]=u);return new ze(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=Pn(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],s=a.length,l=0;l<s;++l)(u=a[l])&&(r.push(t.call(u,u.__data__,l,a)),i.push(u));return new ze(r,i)},filter:function(t){"function"!=typeof t&&(t=Dn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new ze(r,this._parents)},data:function(t,n){if(!t)return v=new Array(this.size()),f=-1,this.each((function(t){v[++f]=t})),v;var e,r=n?Rn:In,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),s=new Array(u),l=new Array(u),f=0;f<u;++f){var c=i[f],h=o[f],p=h.length,v=t.call(c,c&&c.__data__,f,i),d=v.length,g=s[f]=new Array(d),y=a[f]=new Array(d);r(c,h,g,y,l[f]=new Array(p),v,n);for(var m,_,w=0,b=0;w<d;++w)if(m=g[w]){for(w>=b&&(b=w+1);!(_=y[b])&&++b<d;);m._next=_||null}}return(a=new ze(a,i))._enter=s,a._exit=l,a},enter:function(){return new ze(this._enter||this._groups.map(qn),this._parents)},exit:function(){return new ze(this._exit||this._groups.map(qn),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=n[a],f=e[a],c=l.length,h=u[a]=new Array(c),p=0;p<c;++p)(s=l[p]||f[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new ze(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Tn);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],s=a.length,l=i[o]=new Array(s),f=0;f<s;++f)(u=a[f])&&(l[f]=u);l.sort(n)}return new ze(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=En(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?$n:Xn:"function"==typeof n?e.local?Hn:Un:e.local?Fn:Ln)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Bn:"function"==typeof n?Jn:Vn)(t,n,null==e?"":e)):Wn(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Gn:"function"==typeof n?Kn:Zn)(t,n)):this.node()[t]},classed:function(t,n){var e=Qn(t+"");if(arguments.length<2){for(var r=te(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?ue:n?ie:oe)(e,n))},text:function(t){return arguments.length?this.each(null==t?ae:("function"==typeof t?le:se)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?fe:("function"==typeof t?he:ce)(t)):this.node().innerHTML},raise:function(){return this.each(pe)},lower:function(){return this.each(ve)},append:function(t){var n="function"==typeof t?t:Sn(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Sn(t),r=null==n?de:"function"==typeof n?n:On(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ge)},clone:function(t){return this.select(t?me:ye)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=xe(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?ke:Ae,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var s,l=0,f=a.length;l<f;++l)for(r=0,s=a[l];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Ne:Me)(t,n))}};var Pe=X("start","end","cancel","interrupt"),De=[];function qe(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(t){e.state=1,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)}function u(o){var l,f,c,h;if(1!==e.state)return s();for(l in i)if((h=i[l]).name===e.name){if(3===h.state)return Xt(u);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[l]):+l<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[l])}if(Xt((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(o))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(c=e.tween.length),l=0,f=-1;l<c;++l)(h=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++f]=h);r.length=f+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(s),e.state=5,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),s())}function s(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=jt(o,0,e.time)}(t,e,{name:n,index:r,group:i,on:Pe,tween:De,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function je(t,n){var e=Re(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Ie(t,n){var e=Re(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Re(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Te(t,n){var e,r;return function(){var i=Ie(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function Xe(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Ie(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=a;break}s===l&&i.push(a)}o.tween=i}}function $e(t,n,e){var r=t._id;return t.each((function(){var t=Ie(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Re(t,r).value[n]}}function Le(t,n){var e;return("number"==typeof n?ln:n instanceof lt?sn:(e=lt(n))?(n=e,sn):hn)(t,n)}function Fe(t){return function(){this.removeAttribute(t)}}function Ue(t){return function(){this.removeAttributeNS(t.space,t.local)}}function He(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}}function Ye(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}function Be(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttribute(t))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttribute(t)}}function Ve(t,n,e){var r,i,o;return function(){var u,a,s=e(this);if(null!=s)return(u=this.getAttributeNS(t.space,t.local))===(a=s+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,s));this.removeAttributeNS(t.space,t.local)}}function Je(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function We(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ge(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&We(t,i)),e}return i._value=n,i}function Ze(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Je(t,i)),e}return i._value=n,i}function Ke(t,n){return function(){je(this,t).delay=+n.apply(this,arguments)}}function Qe(t,n){return n=+n,function(){je(this,t).delay=n}}function tr(t,n){return function(){Ie(this,t).duration=+n.apply(this,arguments)}}function nr(t,n){return n=+n,function(){Ie(this,t).duration=n}}function er(t,n){if("function"!=typeof n)throw new Error;return function(){Ie(this,t).ease=n}}function rr(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?je:Ie;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var ir=Oe.prototype.constructor;function or(t){return function(){this.style.removeProperty(t)}}function ur(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function ar(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&ur(t,o,e)),r}return o._value=n,o}function sr(t){return function(n){this.textContent=t.call(this,n)}}function lr(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&sr(r)),n}return r._value=t,r}var fr=0;function cr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function hr(){return++fr}var pr=Oe.prototype;cr.prototype={constructor:cr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=On(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,l=r[u],f=l.length,c=o[u]=new Array(f),h=0;h<f;++h)(a=l[h])&&(s=t.call(a,a.__data__,h,l))&&("__data__"in a&&(s.__data__=a.__data__),c[h]=s,qe(c[h],n,e,h,c,Re(a,e)));return new cr(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Pn(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,l=r[a],f=l.length,c=0;c<f;++c)if(s=l[c]){for(var h,p=t.call(s,s.__data__,c,l),v=Re(s,e),d=0,g=p.length;d<g;++d)(h=p[d])&&qe(h,n,e,d,p,v);o.push(p),u.push(s)}return new cr(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=Dn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new cr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=n[a],f=e[a],c=l.length,h=u[a]=new Array(c),p=0;p<c;++p)(s=l[p]||f[p])&&(h[p]=s);for(;a<r;++a)u[a]=n[a];return new cr(u,this._parents,this._name,this._id)},selection:function(){return new ir(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=hr(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)if(u=a[l]){var f=Re(u,n);qe(u,t,e,l,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new cr(r,this._parents,t,e)},call:pr.call,nodes:pr.nodes,node:pr.node,size:pr.size,empty:pr.empty,each:pr.each,on:function(t,n){var e=this._id;return arguments.length<2?Re(this.node(),e).on.on(t):this.each(rr(e,t,n))},attr:function(t,n){var e=En(t),r="transform"===e?xn:Le;return this.attrTween(t,"function"==typeof n?(e.local?Ve:Be)(e,r,$e(this,"attr."+t,n)):null==n?(e.local?Ue:Fe)(e):(e.local?Ye:He)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=En(t);return this.tween(e,(r.local?Ge:Ze)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?bn:Le;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Wn(this,t),u=(this.style.removeProperty(t),Wn(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,or(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Wn(this,t),a=e(this),s=a+"";return null==a&&(this.style.removeProperty(t),s=a=Wn(this,t)),u===s?null:u===r&&s===i?o:(i=s,o=n(r=u,a))}}(t,r,$e(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var s=Ie(this,t),l=s.on,f=null==s.value[u]?o||(o=or(n)):void 0;l===e&&i===f||(r=(e=l).copy()).on(a,i=f),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Wn(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ar(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}($e(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,lr(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Re(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?Te:Xe)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ke:Qe)(n,t)):Re(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?tr:nr)(n,t)):Re(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(er(n,t)):Re(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,u){var a={value:u},s={value:function(){0==--i&&o()}};e.each((function(){var e=Ie(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(s)),e.on=n}))}))}};var vr={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function dr(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return vr.time=Pt(),vr;return e}Oe.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}(this,t)}))},Oe.prototype.transition=function(t){var n,e;t instanceof cr?(n=t._id,t=t._name):(n=hr(),(e=vr).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)(u=a[l])&&qe(u,t,n,l,a,e||dr(u,n));return new cr(r,this._parents,t,n)},X("start","end","cancel","interrupt");var gr=tn(",d"),yr="",mr="",_r={1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December",0:"Unknown/Not Reported"};values.forEach((function(t){return t.month=t.month?""+t.month:"0",t.year=parseInt(t.year),t.events=parseInt(t.events),t.strain=t.strain+"",t}));var wr=lakes.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),br=agencies.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),xr=jurisdictions.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),Ar=stateProv.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),kr=species_list.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),Er=strains.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),Mr=lifestages.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),Nr=stockingMethods.reduce((function(t,n){return t[n[0]]=n[1],t}),{}),Sr=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"value",e=[];if(t.selectedIndex>=0)for(var r=t.selectedIndex;r<t.length;r++)t.options[r].selected&&e.push(t.options[r][n]);return e},zr=function(t){return t.top(1/0).filter((function(t){return t.value>0})).map((function(t){return t.key}))},Or=function(t,n,e){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"label",i=Ce(t).selectAll("option").data(n,(function(t){return t||this.value}));i.exit().remove();var o=i.enter().append("option").text((function(t){return e[t]})).attr("value",(function(t){return t}));i=i.merge(o),"label"===r?i.sort((function(t,n){return e[t].localeCompare(e[n])})):i.sort((function(t,n){return t-n}))},Cr=D(values),Pr=Cr.groupAll().reduceSum((function(t){return t.events})),Dr=Cr.dimension((function(t){return t.year})),qr=Cr.dimension((function(t){return t.month})),jr=Cr.dimension((function(t){return t.lake})),Ir=Cr.dimension((function(t){return t.jurisd}));roiDim=Cr.dimension((function(t){return t.manUnit}));var Rr=Cr.dimension((function(t){return t.state})),Tr=Cr.dimension((function(t){return t.agency_code})),Xr=Cr.dimension((function(t){return t.spc})),$r=Cr.dimension((function(t){return t.strain})),Lr=Cr.dimension((function(t){return t.mark})),Fr=Cr.dimension((function(t){return t.method})),Ur=Cr.dimension((function(t){return t.stage}));Dr.group().reduceSum((function(t){return t.events}));var Hr=qr.group().reduceSum((function(t){return t.events})),Yr=jr.group().reduceSum((function(t){return t.events})),Br=Ir.group().reduceSum((function(t){return t.events}));roiDim.group().reduceSum((function(t){return t.events}));var Vr=Rr.group().reduceSum((function(t){return t.events})),Jr=Tr.group().reduceSum((function(t){return t.events})),Wr=Xr.group().reduceSum((function(t){return t.events})),Gr=$r.group().reduceSum((function(t){return t.events}));Lr.group().reduceSum((function(t){return t.events}));var Zr=Fr.group().reduceSum((function(t){return t.events})),Kr=Ur.group().reduceSum((function(t){return t.events})),Qr=function(){var t,n=zr(Yr);Or("#id_lake",n,wr),n=zr(Hr),Or("#id_months",n,_r,"id"),n=zr(Vr),Or("#id_stateprov",n,Ar),n=zr(Br),Or("#id_jurisdiction",n,xr),n=zr(Jr),Or("#id_agency",n,br),n=zr(Wr),Or("#id_species",n,kr),n=zr(Gr),Or("#id_strain",n,Er),n=zr(Kr),Or("#id_life_stage",n,Mr),n=zr(Zr),Or("#id_stocking_method",n,Nr),t=Pr.value(),Ce("#event-total").text(gr(t)).classed("total-zero",t<=0)};Cr.onChange((function(){Qr()})),Qr();var ti=function(t,n){if(t&&n){var e=parseInt(n)+1;Dr.filter([parseInt(t),e])}else t&&""===n?Dr.filterFunction((function(n){return n>=parseInt(t)})):""===t&&n?Dr.filterFunction((function(t){return t<=parseInt(n)})):Dr.filterAll()},ni=function(t,n){var e=function(t){return"string"==typeof t?new ze([document.querySelectorAll(t)],[document.documentElement]):new ze([null==t?[]:t],Se)}(".year-input");""!==t&&""!==n&&t>n?e.classed("error",!0):e.classed("error",!1)};Ce("#id_lake").on("change",(function(){var t=Sr(this);filterDim(jr,t)})),Ce("#id_stateprov").on("change",(function(){var t=Sr(this);filterDim(Rr,t)})),Ce("#id_jurisdiction").on("change",(function(){var t=Sr(this);filterDim(Ir,t)})),Ce("#id_first_year").on("change",(function(){yr=this.value||"",ni(yr,mr),ti(yr,mr)})),Ce("#id_last_year").on("change",(function(){mr=this.value||"",ni(yr,mr),ti(yr,mr)})),Ce("#id_months").on("change",(function(){var t=Sr(this);filterDim(qr,t)})),Ce("#id_agency").on("change",(function(){var t=Sr(this);filterDim(Tr,t)})),Ce("#id_species").on("change",(function(){var t=Sr(this);filterDim(Xr,t)})),Ce("#id_strain").on("change",(function(){var t=Sr(this);filterDim($r,t)})),Ce("#id_life_stage").on("change",(function(){var t=Sr(this);filterDim(Ur,t)})),Ce("#id_stocking_method").on("change",(function(){var t=Sr(this);filterDim(Fr,t)})),Ce("#reset-button").on("click",(function(){$("#find-events-form").form("reset"),Dr.filterAll(),qr.filterAll(),jr.filterAll(),Ir.filterAll(),roiDim.filterAll(),Rr.filterAll(),Tr.filterAll(),Xr.filterAll(),$r.filterAll(),Lr.filterAll(),Fr.filterAll(),Ur.filterAll()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
